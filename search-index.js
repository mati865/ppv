var N = null;var searchIndex = {};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["ppv"]={"doc":"Simd<[T; N]> - Portable packed vector type","items":[[3,"Simd","ppv","Packed vector type",N,N],[3,"m8","","8-bit wide mask.",N,N],[3,"m16","","16-bit wide mask.",N,N],[3,"m32","","32-bit wide mask.",N,N],[3,"m64","","64-bit wide mask.",N,N],[3,"m128","","128-bit wide mask.",N,N],[11,"clone","","",0,[[["self"]],["m8"]]],[11,"new","","Instantiate a mask with `value`",0,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",0,[[["self"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"ne","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",1,[[["self"]],["m16"]]],[11,"new","","Instantiate a mask with `value`",1,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",1,[[["self"]],["bool"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"ne","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",2,[[["self"]],["m32"]]],[11,"new","","Instantiate a mask with `value`",2,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",2,[[["self"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"ne","","",2,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["self"]],["bool"]]],[11,"gt","","",2,[[["self"],["self"]],["bool"]]],[11,"le","","",2,[[["self"],["self"]],["bool"]]],[11,"ge","","",2,[[["self"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"],["self"]],["ordering"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["m64"]]],[11,"new","","Instantiate a mask with `value`",3,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",3,[[["self"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"ne","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["self"]],["bool"]]],[11,"gt","","",3,[[["self"],["self"]],["bool"]]],[11,"le","","",3,[[["self"],["self"]],["bool"]]],[11,"ge","","",3,[[["self"],["self"]],["bool"]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",4,[[["self"]],["m128"]]],[11,"new","","Instantiate a mask with `value`",4,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"ne","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[6,"i8x16","","A 128-bit vector with 16 `i8` lanes.",N,N],[6,"u8x16","","A 128-bit vector with 16 `u8` lanes.",N,N],[6,"m8x16","","A 128-bit vector mask with 16 `m8` lanes.",N,N],[6,"i16x8","","A 128-bit vector with 8 `i16` lanes.",N,N],[6,"u16x8","","A 128-bit vector with 8 `u16` lanes.",N,N],[6,"m16x8","","A 128-bit vector mask with 8 `m16` lanes.",N,N],[6,"i32x4","","A 128-bit vector with 4 `i32` lanes.",N,N],[6,"u32x4","","A 128-bit vector with 4 `u32` lanes.",N,N],[6,"f32x4","","A 128-bit vector with 4 `f32` lanes.",N,N],[6,"m32x4","","A 128-bit vector mask with 4 `m32` lanes.",N,N],[6,"i64x2","","A 128-bit vector with 2 `i64` lanes.",N,N],[6,"u64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[6,"f64x2","","A 128-bit vector with 2 `f64` lanes.",N,N],[6,"m64x2","","A 128-bit vector mask with 2 `m64` lanes.",N,N],[6,"i128x1","","A 128-bit vector with 1 `i128` lane.",N,N],[6,"u128x1","","A 128-bit vector with 1 `u128` lane.",N,N],[6,"m128x1","","A 128-bit vector mask with 1 `m128` lane.",N,N],[6,"i8x32","","A 256-bit vector with 32 `i8` lanes.",N,N],[6,"u8x32","","A 256-bit vector with 32 `u8` lanes.",N,N],[6,"m8x32","","A 256-bit vector mask with 32 `m8` lanes.",N,N],[6,"i16x16","","A 256-bit vector with 16 `i16` lanes.",N,N],[6,"u16x16","","A 256-bit vector with 16 `u16` lanes.",N,N],[6,"m16x16","","A 256-bit vector mask with 16 `m16` lanes.",N,N],[6,"i32x8","","A 256-bit vector with 8 `i32` lanes.",N,N],[6,"u32x8","","A 256-bit vector with 8 `u32` lanes.",N,N],[6,"f32x8","","A 256-bit vector with 8 `f32` lanes.",N,N],[6,"m32x8","","A 256-bit vector mask with 8 `m32` lanes.",N,N],[6,"i64x4","","A 256-bit vector with 4 `i64` lanes.",N,N],[6,"u64x4","","A 256-bit vector with 4 `u64` lanes.",N,N],[6,"f64x4","","A 256-bit vector with 4 `f64` lanes.",N,N],[6,"m64x4","","A 256-bit vector mask with 4 `m64` lanes.",N,N],[6,"i128x2","","A 256-bit vector with 2 `i128` lanes.",N,N],[6,"u128x2","","A 256-bit vector with 2 `u128` lanes.",N,N],[6,"m128x2","","A 256-bit vector mask with 2 `m128` lanes.",N,N],[11,"clone","","",5,[[["self"]],["simd"]]],[14,"shuffle","","Shuffles vector elements.",N,N],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",6,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",6,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",6,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",6,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",6,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",6,[[["self"],["self"]],["self"]]],[11,"sub","","",6,[[["self"],["self"]],["self"]]],[11,"mul","","",6,[[["self"],["self"]],["self"]]],[11,"div","","",6,[[["self"],["self"]],["self"]]],[11,"rem","","",6,[[["self"],["self"]],["self"]]],[11,"add_assign","","",6,[[["self"],["self"]]]],[11,"sub_assign","","",6,[[["self"],["self"]]]],[11,"mul_assign","","",6,[[["self"],["self"]]]],[11,"div_assign","","",6,[[["self"],["self"]]]],[11,"rem_assign","","",6,[[["self"],["self"]]]],[11,"add","","",6,[[["self"],["i8"]],["self"]]],[11,"sub","","",6,[[["self"],["i8"]],["self"]]],[11,"mul","","",6,[[["self"],["i8"]],["self"]]],[11,"div","","",6,[[["self"],["i8"]],["self"]]],[11,"rem","","",6,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",6,[[["self"],["i8"]]]],[11,"sub_assign","","",6,[[["self"],["i8"]]]],[11,"mul_assign","","",6,[[["self"],["i8"]]]],[11,"div_assign","","",6,[[["self"],["i8"]]]],[11,"rem_assign","","",6,[[["self"],["i8"]]]],[11,"not","","",6,[[["self"]],["self"]]],[11,"bitxor","","",6,[[["self"],["self"]],["self"]]],[11,"bitand","","",6,[[["self"],["self"]],["self"]]],[11,"bitor","","",6,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",6,[[["self"],["self"]]]],[11,"bitor_assign","","",6,[[["self"],["self"]]]],[11,"bitxor_assign","","",6,[[["self"],["self"]]]],[11,"bitxor","","",6,[[["self"],["i8"]],["self"]]],[11,"bitand","","",6,[[["self"],["i8"]],["self"]]],[11,"bitor","","",6,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",6,[[["self"],["i8"]]]],[11,"bitor_assign","","",6,[[["self"],["i8"]]]],[11,"bitxor_assign","","",6,[[["self"],["i8"]]]],[11,"shl","","",6,[[["self"],["self"]],["self"]]],[11,"shr","","",6,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["self"]]]],[11,"shr_assign","","",6,[[["self"],["self"]]]],[11,"shl","","",6,[[["self"],["u32"]],["self"]]],[11,"shr","","",6,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["u32"]]]],[11,"shr_assign","","",6,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",6,[[["self"],["i8x16"]],["i8x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",6,[[["self"],["i8x16"]],["i8x16"]]],[11,"neg","","",6,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",6,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",6,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",6,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",6,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",6,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",6,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",6,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",6,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",6,[[["self"]],["i8"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from","","",6,N],[11,"default","","",6,[[],["self"]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",6,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",6,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"swap_bytes","","Reverses the byte order of the vector.",6,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",6,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",6,[[["self"]],["self"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",6,[[["self"],["i8x16"]],["m8x16"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",7,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",7,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",7,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",7,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",7,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",7,[[["self"],["self"]],["self"]]],[11,"sub","","",7,[[["self"],["self"]],["self"]]],[11,"mul","","",7,[[["self"],["self"]],["self"]]],[11,"div","","",7,[[["self"],["self"]],["self"]]],[11,"rem","","",7,[[["self"],["self"]],["self"]]],[11,"add_assign","","",7,[[["self"],["self"]]]],[11,"sub_assign","","",7,[[["self"],["self"]]]],[11,"mul_assign","","",7,[[["self"],["self"]]]],[11,"div_assign","","",7,[[["self"],["self"]]]],[11,"rem_assign","","",7,[[["self"],["self"]]]],[11,"add","","",7,[[["self"],["u8"]],["self"]]],[11,"sub","","",7,[[["self"],["u8"]],["self"]]],[11,"mul","","",7,[[["self"],["u8"]],["self"]]],[11,"div","","",7,[[["self"],["u8"]],["self"]]],[11,"rem","","",7,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",7,[[["self"],["u8"]]]],[11,"sub_assign","","",7,[[["self"],["u8"]]]],[11,"mul_assign","","",7,[[["self"],["u8"]]]],[11,"div_assign","","",7,[[["self"],["u8"]]]],[11,"rem_assign","","",7,[[["self"],["u8"]]]],[11,"not","","",7,[[["self"]],["self"]]],[11,"bitxor","","",7,[[["self"],["self"]],["self"]]],[11,"bitand","","",7,[[["self"],["self"]],["self"]]],[11,"bitor","","",7,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",7,[[["self"],["self"]]]],[11,"bitor_assign","","",7,[[["self"],["self"]]]],[11,"bitxor_assign","","",7,[[["self"],["self"]]]],[11,"bitxor","","",7,[[["self"],["u8"]],["self"]]],[11,"bitand","","",7,[[["self"],["u8"]],["self"]]],[11,"bitor","","",7,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",7,[[["self"],["u8"]]]],[11,"bitor_assign","","",7,[[["self"],["u8"]]]],[11,"bitxor_assign","","",7,[[["self"],["u8"]]]],[11,"shl","","",7,[[["self"],["self"]],["self"]]],[11,"shr","","",7,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",7,[[["self"],["self"]]]],[11,"shr_assign","","",7,[[["self"],["self"]]]],[11,"shl","","",7,[[["self"],["u32"]],["self"]]],[11,"shr","","",7,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",7,[[["self"],["u32"]]]],[11,"shr_assign","","",7,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",7,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",7,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",7,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",7,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",7,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",7,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",7,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",7,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",7,[[["self"]],["u8"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"from","","",7,N],[11,"default","","",7,[[],["self"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",7,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",7,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",7,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",7,N],[11,"swap_bytes","","Reverses the byte order of the vector.",7,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",7,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"ne","","",7,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",7,[[["self"],["u8x16"]],["m8x16"]]],[11,"partial_cmp","","",7,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["self"]],["bool"]]],[11,"le","","",7,[[["self"],["self"]],["bool"]]],[11,"ge","","",7,[[["self"],["self"]],["bool"]]],[11,"gt","","",7,[[["self"],["self"]],["bool"]]],[11,"cmp","","",7,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",8,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",8,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",8,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",8,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",8,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",8,[[["self"]],["self"]]],[11,"bitxor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand","","",8,[[["self"],["self"]],["self"]]],[11,"bitor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["self"]]]],[11,"bitor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor","","",8,[[["self"],["bool"]],["self"]]],[11,"bitand","","",8,[[["self"],["bool"]],["self"]]],[11,"bitor","","",8,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["bool"]]]],[11,"bitor_assign","","",8,[[["self"],["bool"]]]],[11,"bitxor_assign","","",8,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",8,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",8,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",8,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",8,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",8,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",8,[[["self"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from","","",8,N],[11,"from","","",8,[[["m16x16"]],["self"]]],[11,"default","","",8,[[],["self"]]],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"ne","","",8,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",8,[[["self"],["m8x16"]],["m8x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",8,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",8,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["self"]],["bool"]]],[11,"le","","",8,[[["self"],["self"]],["bool"]]],[11,"ge","","",8,[[["self"],["self"]],["bool"]]],[11,"gt","","",8,[[["self"],["self"]],["bool"]]],[11,"cmp","","",8,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",9,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",9,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",9,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",9,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",9,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",9,[[["self"],["self"]],["self"]]],[11,"sub","","",9,[[["self"],["self"]],["self"]]],[11,"mul","","",9,[[["self"],["self"]],["self"]]],[11,"div","","",9,[[["self"],["self"]],["self"]]],[11,"rem","","",9,[[["self"],["self"]],["self"]]],[11,"add_assign","","",9,[[["self"],["self"]]]],[11,"sub_assign","","",9,[[["self"],["self"]]]],[11,"mul_assign","","",9,[[["self"],["self"]]]],[11,"div_assign","","",9,[[["self"],["self"]]]],[11,"rem_assign","","",9,[[["self"],["self"]]]],[11,"add","","",9,[[["self"],["i16"]],["self"]]],[11,"sub","","",9,[[["self"],["i16"]],["self"]]],[11,"mul","","",9,[[["self"],["i16"]],["self"]]],[11,"div","","",9,[[["self"],["i16"]],["self"]]],[11,"rem","","",9,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",9,[[["self"],["i16"]]]],[11,"sub_assign","","",9,[[["self"],["i16"]]]],[11,"mul_assign","","",9,[[["self"],["i16"]]]],[11,"div_assign","","",9,[[["self"],["i16"]]]],[11,"rem_assign","","",9,[[["self"],["i16"]]]],[11,"not","","",9,[[["self"]],["self"]]],[11,"bitxor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand","","",9,[[["self"],["self"]],["self"]]],[11,"bitor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["self"]]]],[11,"bitor_assign","","",9,[[["self"],["self"]]]],[11,"bitxor_assign","","",9,[[["self"],["self"]]]],[11,"bitxor","","",9,[[["self"],["i16"]],["self"]]],[11,"bitand","","",9,[[["self"],["i16"]],["self"]]],[11,"bitor","","",9,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["i16"]]]],[11,"bitor_assign","","",9,[[["self"],["i16"]]]],[11,"bitxor_assign","","",9,[[["self"],["i16"]]]],[11,"shl","","",9,[[["self"],["self"]],["self"]]],[11,"shr","","",9,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["self"]]]],[11,"shr_assign","","",9,[[["self"],["self"]]]],[11,"shl","","",9,[[["self"],["u32"]],["self"]]],[11,"shr","","",9,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u32"]]]],[11,"shr_assign","","",9,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",9,[[["self"],["i16x8"]],["i16x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",9,[[["self"],["i16x8"]],["i16x8"]]],[11,"neg","","",9,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",9,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",9,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",9,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",9,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",9,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",9,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",9,[[["self"]],["i16"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from","","",9,N],[11,"default","","",9,[[],["self"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"swap_bytes","","Reverses the byte order of the vector.",9,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"ne","","",9,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",9,[[["self"],["i16x8"]],["m16x8"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["self"]],["bool"]]],[11,"le","","",9,[[["self"],["self"]],["bool"]]],[11,"ge","","",9,[[["self"],["self"]],["bool"]]],[11,"gt","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",10,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",10,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",10,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",10,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",10,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",10,[[["self"],["self"]],["self"]]],[11,"sub","","",10,[[["self"],["self"]],["self"]]],[11,"mul","","",10,[[["self"],["self"]],["self"]]],[11,"div","","",10,[[["self"],["self"]],["self"]]],[11,"rem","","",10,[[["self"],["self"]],["self"]]],[11,"add_assign","","",10,[[["self"],["self"]]]],[11,"sub_assign","","",10,[[["self"],["self"]]]],[11,"mul_assign","","",10,[[["self"],["self"]]]],[11,"div_assign","","",10,[[["self"],["self"]]]],[11,"rem_assign","","",10,[[["self"],["self"]]]],[11,"add","","",10,[[["self"],["u16"]],["self"]]],[11,"sub","","",10,[[["self"],["u16"]],["self"]]],[11,"mul","","",10,[[["self"],["u16"]],["self"]]],[11,"div","","",10,[[["self"],["u16"]],["self"]]],[11,"rem","","",10,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",10,[[["self"],["u16"]]]],[11,"sub_assign","","",10,[[["self"],["u16"]]]],[11,"mul_assign","","",10,[[["self"],["u16"]]]],[11,"div_assign","","",10,[[["self"],["u16"]]]],[11,"rem_assign","","",10,[[["self"],["u16"]]]],[11,"not","","",10,[[["self"]],["self"]]],[11,"bitxor","","",10,[[["self"],["self"]],["self"]]],[11,"bitand","","",10,[[["self"],["self"]],["self"]]],[11,"bitor","","",10,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",10,[[["self"],["self"]]]],[11,"bitor_assign","","",10,[[["self"],["self"]]]],[11,"bitxor_assign","","",10,[[["self"],["self"]]]],[11,"bitxor","","",10,[[["self"],["u16"]],["self"]]],[11,"bitand","","",10,[[["self"],["u16"]],["self"]]],[11,"bitor","","",10,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",10,[[["self"],["u16"]]]],[11,"bitor_assign","","",10,[[["self"],["u16"]]]],[11,"bitxor_assign","","",10,[[["self"],["u16"]]]],[11,"shl","","",10,[[["self"],["self"]],["self"]]],[11,"shr","","",10,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",10,[[["self"],["self"]]]],[11,"shr_assign","","",10,[[["self"],["self"]]]],[11,"shl","","",10,[[["self"],["u32"]],["self"]]],[11,"shr","","",10,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",10,[[["self"],["u32"]]]],[11,"shr_assign","","",10,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",10,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",10,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",10,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",10,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",10,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",10,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",10,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",10,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",10,[[["self"]],["u16"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"from","","",10,N],[11,"default","","",10,[[],["self"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",10,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",10,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"swap_bytes","","Reverses the byte order of the vector.",10,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",10,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",10,[[["self"]],["self"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"ne","","",10,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",10,[[["self"],["u16x8"]],["m16x8"]]],[11,"partial_cmp","","",10,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["self"]],["bool"]]],[11,"le","","",10,[[["self"],["self"]],["bool"]]],[11,"ge","","",10,[[["self"],["self"]],["bool"]]],[11,"gt","","",10,[[["self"],["self"]],["bool"]]],[11,"cmp","","",10,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",11,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",11,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",11,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",11,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",11,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",11,[[["self"]],["self"]]],[11,"bitxor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand","","",11,[[["self"],["self"]],["self"]]],[11,"bitor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["self"]]]],[11,"bitor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor","","",11,[[["self"],["bool"]],["self"]]],[11,"bitand","","",11,[[["self"],["bool"]],["self"]]],[11,"bitor","","",11,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["bool"]]]],[11,"bitor_assign","","",11,[[["self"],["bool"]]]],[11,"bitxor_assign","","",11,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",11,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",11,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",11,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",11,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",11,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",11,[[["self"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,N],[11,"from","","",11,[[["m32x8"]],["self"]]],[11,"default","","",11,[[],["self"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"ne","","",11,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",11,[[["self"],["m16x8"]],["m16x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",11,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",11,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["self"]],["bool"]]],[11,"le","","",11,[[["self"],["self"]],["bool"]]],[11,"ge","","",11,[[["self"],["self"]],["bool"]]],[11,"gt","","",11,[[["self"],["self"]],["bool"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",12,[[["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",12,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",12,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"mul","","",12,[[["self"],["self"]],["self"]]],[11,"div","","",12,[[["self"],["self"]],["self"]]],[11,"rem","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"mul_assign","","",12,[[["self"],["self"]]]],[11,"div_assign","","",12,[[["self"],["self"]]]],[11,"rem_assign","","",12,[[["self"],["self"]]]],[11,"add","","",12,[[["self"],["i32"]],["self"]]],[11,"sub","","",12,[[["self"],["i32"]],["self"]]],[11,"mul","","",12,[[["self"],["i32"]],["self"]]],[11,"div","","",12,[[["self"],["i32"]],["self"]]],[11,"rem","","",12,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",12,[[["self"],["i32"]]]],[11,"sub_assign","","",12,[[["self"],["i32"]]]],[11,"mul_assign","","",12,[[["self"],["i32"]]]],[11,"div_assign","","",12,[[["self"],["i32"]]]],[11,"rem_assign","","",12,[[["self"],["i32"]]]],[11,"not","","",12,[[["self"]],["self"]]],[11,"bitxor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["self"]],["self"]]],[11,"bitor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["self"]]]],[11,"bitor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor","","",12,[[["self"],["i32"]],["self"]]],[11,"bitand","","",12,[[["self"],["i32"]],["self"]]],[11,"bitor","","",12,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["i32"]]]],[11,"bitor_assign","","",12,[[["self"],["i32"]]]],[11,"bitxor_assign","","",12,[[["self"],["i32"]]]],[11,"shl","","",12,[[["self"],["self"]],["self"]]],[11,"shr","","",12,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["self"]]]],[11,"shr_assign","","",12,[[["self"],["self"]]]],[11,"shl","","",12,[[["self"],["u32"]],["self"]]],[11,"shr","","",12,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u32"]]]],[11,"shr_assign","","",12,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["i32x4"]],["i32x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["i32x4"]],["i32x4"]]],[11,"neg","","",12,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",12,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",12,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",12,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",12,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",12,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",12,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",12,[[["self"]],["i32"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,N],[11,"default","","",12,[[],["self"]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"swap_bytes","","Reverses the byte order of the vector.",12,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"ne","","",12,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",12,[[["self"],["i32x4"]],["m32x4"]]],[11,"partial_cmp","","",12,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["self"]],["bool"]]],[11,"le","","",12,[[["self"],["self"]],["bool"]]],[11,"ge","","",12,[[["self"],["self"]],["bool"]]],[11,"gt","","",12,[[["self"],["self"]],["bool"]]],[11,"cmp","","",12,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",13,[[["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",13,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",13,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",13,[[["self"],["self"]],["self"]]],[11,"sub","","",13,[[["self"],["self"]],["self"]]],[11,"mul","","",13,[[["self"],["self"]],["self"]]],[11,"div","","",13,[[["self"],["self"]],["self"]]],[11,"rem","","",13,[[["self"],["self"]],["self"]]],[11,"add_assign","","",13,[[["self"],["self"]]]],[11,"sub_assign","","",13,[[["self"],["self"]]]],[11,"mul_assign","","",13,[[["self"],["self"]]]],[11,"div_assign","","",13,[[["self"],["self"]]]],[11,"rem_assign","","",13,[[["self"],["self"]]]],[11,"add","","",13,[[["self"],["u32"]],["self"]]],[11,"sub","","",13,[[["self"],["u32"]],["self"]]],[11,"mul","","",13,[[["self"],["u32"]],["self"]]],[11,"div","","",13,[[["self"],["u32"]],["self"]]],[11,"rem","","",13,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",13,[[["self"],["u32"]]]],[11,"sub_assign","","",13,[[["self"],["u32"]]]],[11,"mul_assign","","",13,[[["self"],["u32"]]]],[11,"div_assign","","",13,[[["self"],["u32"]]]],[11,"rem_assign","","",13,[[["self"],["u32"]]]],[11,"not","","",13,[[["self"]],["self"]]],[11,"bitxor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand","","",13,[[["self"],["self"]],["self"]]],[11,"bitor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["self"]]]],[11,"bitor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor","","",13,[[["self"],["u32"]],["self"]]],[11,"bitand","","",13,[[["self"],["u32"]],["self"]]],[11,"bitor","","",13,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["u32"]]]],[11,"bitor_assign","","",13,[[["self"],["u32"]]]],[11,"bitxor_assign","","",13,[[["self"],["u32"]]]],[11,"shl","","",13,[[["self"],["self"]],["self"]]],[11,"shr","","",13,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["self"]]]],[11,"shr_assign","","",13,[[["self"],["self"]]]],[11,"shl","","",13,[[["self"],["u32"]],["self"]]],[11,"shr","","",13,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u32"]]]],[11,"shr_assign","","",13,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",13,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",13,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",13,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",13,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",13,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",13,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",13,[[["self"]],["u32"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,N],[11,"default","","",13,[[],["self"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"swap_bytes","","Reverses the byte order of the vector.",13,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"ne","","",13,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",13,[[["self"],["u32x4"]],["m32x4"]]],[11,"partial_cmp","","",13,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["self"]],["bool"]]],[11,"le","","",13,[[["self"],["self"]],["bool"]]],[11,"ge","","",13,[[["self"],["self"]],["bool"]]],[11,"gt","","",13,[[["self"],["self"]],["bool"]]],[11,"cmp","","",13,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",14,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",14,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",14,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",14,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",14,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",14,[[["self"],["self"]],["self"]]],[11,"sub","","",14,[[["self"],["self"]],["self"]]],[11,"mul","","",14,[[["self"],["self"]],["self"]]],[11,"div","","",14,[[["self"],["self"]],["self"]]],[11,"rem","","",14,[[["self"],["self"]],["self"]]],[11,"add_assign","","",14,[[["self"],["self"]]]],[11,"sub_assign","","",14,[[["self"],["self"]]]],[11,"mul_assign","","",14,[[["self"],["self"]]]],[11,"div_assign","","",14,[[["self"],["self"]]]],[11,"rem_assign","","",14,[[["self"],["self"]]]],[11,"add","","",14,[[["self"],["f32"]],["self"]]],[11,"sub","","",14,[[["self"],["f32"]],["self"]]],[11,"mul","","",14,[[["self"],["f32"]],["self"]]],[11,"div","","",14,[[["self"],["f32"]],["self"]]],[11,"rem","","",14,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",14,[[["self"],["f32"]]]],[11,"sub_assign","","",14,[[["self"],["f32"]]]],[11,"mul_assign","","",14,[[["self"],["f32"]]]],[11,"div_assign","","",14,[[["self"],["f32"]]]],[11,"rem_assign","","",14,[[["self"],["f32"]]]],[11,"neg","","",14,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",14,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",14,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",14,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",14,[[["self"]],["f32"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,N],[11,"default","","",14,[[],["self"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"ne","","",14,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"abs","","Absolute value.",14,[[["self"]],["self"]]],[11,"cos","","Cosine.",14,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",14,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",14,[[["self"]],["self"]]],[11,"sin","","",14,[[["self"]],["self"]]],[11,"sqrt","","",14,[[["self"]],["self"]]],[11,"sqrte","","",14,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",14,[[["self"],["f32x4"]],["m32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",15,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",15,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",15,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",15,[[["self"]],["self"]]],[11,"bitxor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand","","",15,[[["self"],["self"]],["self"]]],[11,"bitor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["self"]]]],[11,"bitor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor","","",15,[[["self"],["bool"]],["self"]]],[11,"bitand","","",15,[[["self"],["bool"]],["self"]]],[11,"bitor","","",15,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["bool"]]]],[11,"bitor_assign","","",15,[[["self"],["bool"]]]],[11,"bitxor_assign","","",15,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",15,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",15,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",15,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",15,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",15,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",15,[[["self"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from","","",15,N],[11,"from","","",15,[[["m64x4"]],["self"]]],[11,"default","","",15,[[],["self"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"ne","","",15,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",15,[[["self"],["m32x4"]],["m32x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",15,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",15,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["self"]],["bool"]]],[11,"le","","",15,[[["self"],["self"]],["bool"]]],[11,"ge","","",15,[[["self"],["self"]],["bool"]]],[11,"gt","","",15,[[["self"],["self"]],["bool"]]],[11,"cmp","","",15,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",16,[[["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",16,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",16,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",16,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",16,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"mul","","",16,[[["self"],["self"]],["self"]]],[11,"div","","",16,[[["self"],["self"]],["self"]]],[11,"rem","","",16,[[["self"],["self"]],["self"]]],[11,"add_assign","","",16,[[["self"],["self"]]]],[11,"sub_assign","","",16,[[["self"],["self"]]]],[11,"mul_assign","","",16,[[["self"],["self"]]]],[11,"div_assign","","",16,[[["self"],["self"]]]],[11,"rem_assign","","",16,[[["self"],["self"]]]],[11,"add","","",16,[[["self"],["i64"]],["self"]]],[11,"sub","","",16,[[["self"],["i64"]],["self"]]],[11,"mul","","",16,[[["self"],["i64"]],["self"]]],[11,"div","","",16,[[["self"],["i64"]],["self"]]],[11,"rem","","",16,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",16,[[["self"],["i64"]]]],[11,"sub_assign","","",16,[[["self"],["i64"]]]],[11,"mul_assign","","",16,[[["self"],["i64"]]]],[11,"div_assign","","",16,[[["self"],["i64"]]]],[11,"rem_assign","","",16,[[["self"],["i64"]]]],[11,"not","","",16,[[["self"]],["self"]]],[11,"bitxor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand","","",16,[[["self"],["self"]],["self"]]],[11,"bitor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["self"]]]],[11,"bitor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor","","",16,[[["self"],["i64"]],["self"]]],[11,"bitand","","",16,[[["self"],["i64"]],["self"]]],[11,"bitor","","",16,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["i64"]]]],[11,"bitor_assign","","",16,[[["self"],["i64"]]]],[11,"bitxor_assign","","",16,[[["self"],["i64"]]]],[11,"shl","","",16,[[["self"],["self"]],["self"]]],[11,"shr","","",16,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["self"]]]],[11,"shr_assign","","",16,[[["self"],["self"]]]],[11,"shl","","",16,[[["self"],["u32"]],["self"]]],[11,"shr","","",16,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u32"]]]],[11,"shr_assign","","",16,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",16,[[["self"],["i64x2"]],["i64x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",16,[[["self"],["i64x2"]],["i64x2"]]],[11,"neg","","",16,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",16,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",16,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",16,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",16,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",16,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",16,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",16,[[["self"]],["i64"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"from","","",16,N],[11,"default","","",16,[[],["self"]]],[11,"hash","","",16,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"swap_bytes","","Reverses the byte order of the vector.",16,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"ne","","",16,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",16,[[["self"],["i64x2"]],["m64x2"]]],[11,"partial_cmp","","",16,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["self"]],["bool"]]],[11,"le","","",16,[[["self"],["self"]],["bool"]]],[11,"ge","","",16,[[["self"],["self"]],["bool"]]],[11,"gt","","",16,[[["self"],["self"]],["bool"]]],[11,"cmp","","",16,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",17,[[["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",17,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",17,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",17,[[["self"],["self"]],["self"]]],[11,"sub","","",17,[[["self"],["self"]],["self"]]],[11,"mul","","",17,[[["self"],["self"]],["self"]]],[11,"div","","",17,[[["self"],["self"]],["self"]]],[11,"rem","","",17,[[["self"],["self"]],["self"]]],[11,"add_assign","","",17,[[["self"],["self"]]]],[11,"sub_assign","","",17,[[["self"],["self"]]]],[11,"mul_assign","","",17,[[["self"],["self"]]]],[11,"div_assign","","",17,[[["self"],["self"]]]],[11,"rem_assign","","",17,[[["self"],["self"]]]],[11,"add","","",17,[[["self"],["u64"]],["self"]]],[11,"sub","","",17,[[["self"],["u64"]],["self"]]],[11,"mul","","",17,[[["self"],["u64"]],["self"]]],[11,"div","","",17,[[["self"],["u64"]],["self"]]],[11,"rem","","",17,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",17,[[["self"],["u64"]]]],[11,"sub_assign","","",17,[[["self"],["u64"]]]],[11,"mul_assign","","",17,[[["self"],["u64"]]]],[11,"div_assign","","",17,[[["self"],["u64"]]]],[11,"rem_assign","","",17,[[["self"],["u64"]]]],[11,"not","","",17,[[["self"]],["self"]]],[11,"bitxor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand","","",17,[[["self"],["self"]],["self"]]],[11,"bitor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["self"]]]],[11,"bitor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor","","",17,[[["self"],["u64"]],["self"]]],[11,"bitand","","",17,[[["self"],["u64"]],["self"]]],[11,"bitor","","",17,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["u64"]]]],[11,"bitor_assign","","",17,[[["self"],["u64"]]]],[11,"bitxor_assign","","",17,[[["self"],["u64"]]]],[11,"shl","","",17,[[["self"],["self"]],["self"]]],[11,"shr","","",17,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["self"]]]],[11,"shr_assign","","",17,[[["self"],["self"]]]],[11,"shl","","",17,[[["self"],["u32"]],["self"]]],[11,"shr","","",17,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u32"]]]],[11,"shr_assign","","",17,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",17,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",17,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",17,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",17,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",17,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",17,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",17,[[["self"]],["u64"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"from","","",17,N],[11,"default","","",17,[[],["self"]]],[11,"hash","","",17,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"swap_bytes","","Reverses the byte order of the vector.",17,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"eq","","",17,[[["self"],["self"]],["bool"]]],[11,"ne","","",17,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",17,[[["self"],["u64x2"]],["m64x2"]]],[11,"partial_cmp","","",17,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["self"]],["bool"]]],[11,"le","","",17,[[["self"],["self"]],["bool"]]],[11,"ge","","",17,[[["self"],["self"]],["bool"]]],[11,"gt","","",17,[[["self"],["self"]],["bool"]]],[11,"cmp","","",17,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",18,[[["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",18,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",18,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",18,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",18,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",18,[[["self"],["self"]],["self"]]],[11,"sub","","",18,[[["self"],["self"]],["self"]]],[11,"mul","","",18,[[["self"],["self"]],["self"]]],[11,"div","","",18,[[["self"],["self"]],["self"]]],[11,"rem","","",18,[[["self"],["self"]],["self"]]],[11,"add_assign","","",18,[[["self"],["self"]]]],[11,"sub_assign","","",18,[[["self"],["self"]]]],[11,"mul_assign","","",18,[[["self"],["self"]]]],[11,"div_assign","","",18,[[["self"],["self"]]]],[11,"rem_assign","","",18,[[["self"],["self"]]]],[11,"add","","",18,[[["self"],["f64"]],["self"]]],[11,"sub","","",18,[[["self"],["f64"]],["self"]]],[11,"mul","","",18,[[["self"],["f64"]],["self"]]],[11,"div","","",18,[[["self"],["f64"]],["self"]]],[11,"rem","","",18,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",18,[[["self"],["f64"]]]],[11,"sub_assign","","",18,[[["self"],["f64"]]]],[11,"mul_assign","","",18,[[["self"],["f64"]]]],[11,"div_assign","","",18,[[["self"],["f64"]]]],[11,"rem_assign","","",18,[[["self"],["f64"]]]],[11,"neg","","",18,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",18,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",18,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",18,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",18,[[["self"]],["f64"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"from","","",18,N],[11,"default","","",18,[[],["self"]]],[11,"eq","","",18,[[["self"],["self"]],["bool"]]],[11,"ne","","",18,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"abs","","Absolute value.",18,[[["self"]],["self"]]],[11,"cos","","Cosine.",18,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",18,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",18,[[["self"]],["self"]]],[11,"sin","","",18,[[["self"]],["self"]]],[11,"sqrt","","",18,[[["self"]],["self"]]],[11,"sqrte","","",18,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",18,[[["self"],["f64x2"]],["m64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",19,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",19,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",19,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",19,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",19,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",19,[[["self"]],["self"]]],[11,"bitxor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand","","",19,[[["self"],["self"]],["self"]]],[11,"bitor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["self"]]]],[11,"bitor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor","","",19,[[["self"],["bool"]],["self"]]],[11,"bitand","","",19,[[["self"],["bool"]],["self"]]],[11,"bitor","","",19,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["bool"]]]],[11,"bitor_assign","","",19,[[["self"],["bool"]]]],[11,"bitxor_assign","","",19,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",19,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",19,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",19,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",19,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",19,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",19,[[["self"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from","","",19,N],[11,"from","","",19,[[["m128x2"]],["self"]]],[11,"default","","",19,[[],["self"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"ne","","",19,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",19,[[["self"],["m64x2"]],["m64x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",19,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",19,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["self"]],["bool"]]],[11,"le","","",19,[[["self"],["self"]],["bool"]]],[11,"ge","","",19,[[["self"],["self"]],["bool"]]],[11,"gt","","",19,[[["self"],["self"]],["bool"]]],[11,"cmp","","",19,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",20,[[["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",20,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",20,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",20,[[["self"],["self"]],["self"]]],[11,"sub","","",20,[[["self"],["self"]],["self"]]],[11,"mul","","",20,[[["self"],["self"]],["self"]]],[11,"div","","",20,[[["self"],["self"]],["self"]]],[11,"rem","","",20,[[["self"],["self"]],["self"]]],[11,"add_assign","","",20,[[["self"],["self"]]]],[11,"sub_assign","","",20,[[["self"],["self"]]]],[11,"mul_assign","","",20,[[["self"],["self"]]]],[11,"div_assign","","",20,[[["self"],["self"]]]],[11,"rem_assign","","",20,[[["self"],["self"]]]],[11,"add","","",20,[[["self"],["i128"]],["self"]]],[11,"sub","","",20,[[["self"],["i128"]],["self"]]],[11,"mul","","",20,[[["self"],["i128"]],["self"]]],[11,"div","","",20,[[["self"],["i128"]],["self"]]],[11,"rem","","",20,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",20,[[["self"],["i128"]]]],[11,"sub_assign","","",20,[[["self"],["i128"]]]],[11,"mul_assign","","",20,[[["self"],["i128"]]]],[11,"div_assign","","",20,[[["self"],["i128"]]]],[11,"rem_assign","","",20,[[["self"],["i128"]]]],[11,"not","","",20,[[["self"]],["self"]]],[11,"bitxor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand","","",20,[[["self"],["self"]],["self"]]],[11,"bitor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["self"]]]],[11,"bitor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor","","",20,[[["self"],["i128"]],["self"]]],[11,"bitand","","",20,[[["self"],["i128"]],["self"]]],[11,"bitor","","",20,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["i128"]]]],[11,"bitor_assign","","",20,[[["self"],["i128"]]]],[11,"bitxor_assign","","",20,[[["self"],["i128"]]]],[11,"shl","","",20,[[["self"],["self"]],["self"]]],[11,"shr","","",20,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["self"]]]],[11,"shr_assign","","",20,[[["self"],["self"]]]],[11,"shl","","",20,[[["self"],["u32"]],["self"]]],[11,"shr","","",20,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u32"]]]],[11,"shr_assign","","",20,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["i128x1"]],["i128x1"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["i128x1"]],["i128x1"]]],[11,"neg","","",20,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",20,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",20,[[["self"]],["i128"]]],[11,"max_element","","Largest vector element value.",20,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",20,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",20,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",20,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",20,[[["self"]],["i128"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"from","","",20,N],[11,"default","","",20,[[],["self"]]],[11,"hash","","",20,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"swap_bytes","","Reverses the byte order of the vector.",20,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["self"]],["bool"]]],[11,"ne","","",20,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",20,[[["self"],["i128x1"]],["m128x1"]]],[11,"partial_cmp","","",20,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["self"]],["bool"]]],[11,"le","","",20,[[["self"],["self"]],["bool"]]],[11,"ge","","",20,[[["self"],["self"]],["bool"]]],[11,"gt","","",20,[[["self"],["self"]],["bool"]]],[11,"cmp","","",20,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",21,[[["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",21,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",21,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",21,[[["self"],["self"]],["self"]]],[11,"sub","","",21,[[["self"],["self"]],["self"]]],[11,"mul","","",21,[[["self"],["self"]],["self"]]],[11,"div","","",21,[[["self"],["self"]],["self"]]],[11,"rem","","",21,[[["self"],["self"]],["self"]]],[11,"add_assign","","",21,[[["self"],["self"]]]],[11,"sub_assign","","",21,[[["self"],["self"]]]],[11,"mul_assign","","",21,[[["self"],["self"]]]],[11,"div_assign","","",21,[[["self"],["self"]]]],[11,"rem_assign","","",21,[[["self"],["self"]]]],[11,"add","","",21,[[["self"],["u128"]],["self"]]],[11,"sub","","",21,[[["self"],["u128"]],["self"]]],[11,"mul","","",21,[[["self"],["u128"]],["self"]]],[11,"div","","",21,[[["self"],["u128"]],["self"]]],[11,"rem","","",21,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",21,[[["self"],["u128"]]]],[11,"sub_assign","","",21,[[["self"],["u128"]]]],[11,"mul_assign","","",21,[[["self"],["u128"]]]],[11,"div_assign","","",21,[[["self"],["u128"]]]],[11,"rem_assign","","",21,[[["self"],["u128"]]]],[11,"not","","",21,[[["self"]],["self"]]],[11,"bitxor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand","","",21,[[["self"],["self"]],["self"]]],[11,"bitor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["self"]]]],[11,"bitor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor","","",21,[[["self"],["u128"]],["self"]]],[11,"bitand","","",21,[[["self"],["u128"]],["self"]]],[11,"bitor","","",21,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["u128"]]]],[11,"bitor_assign","","",21,[[["self"],["u128"]]]],[11,"bitxor_assign","","",21,[[["self"],["u128"]]]],[11,"shl","","",21,[[["self"],["self"]],["self"]]],[11,"shr","","",21,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["self"]]]],[11,"shr_assign","","",21,[[["self"],["self"]]]],[11,"shl","","",21,[[["self"],["u32"]],["self"]]],[11,"shr","","",21,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["u32"]]]],[11,"shr_assign","","",21,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",21,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",21,[[["self"]],["u128"]]],[11,"max_element","","Largest vector element value.",21,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",21,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",21,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",21,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",21,[[["self"]],["u128"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"from","","",21,N],[11,"default","","",21,[[],["self"]]],[11,"hash","","",21,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"swap_bytes","","Reverses the byte order of the vector.",21,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"eq","","",21,[[["self"],["self"]],["bool"]]],[11,"ne","","",21,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",21,[[["self"],["u128x1"]],["m128x1"]]],[11,"partial_cmp","","",21,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["self"]],["bool"]]],[11,"le","","",21,[[["self"],["self"]],["bool"]]],[11,"ge","","",21,[[["self"],["self"]],["bool"]]],[11,"gt","","",21,[[["self"],["self"]],["bool"]]],[11,"cmp","","",21,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",22,[[["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",22,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",22,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",22,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",22,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",22,[[["self"]],["self"]]],[11,"bitxor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand","","",22,[[["self"],["self"]],["self"]]],[11,"bitor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["self"]]]],[11,"bitor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor","","",22,[[["self"],["bool"]],["self"]]],[11,"bitand","","",22,[[["self"],["bool"]],["self"]]],[11,"bitor","","",22,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["bool"]]]],[11,"bitor_assign","","",22,[[["self"],["bool"]]]],[11,"bitxor_assign","","",22,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",22,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",22,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",22,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",22,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",22,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",22,[[["self"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"from","","",22,N],[11,"default","","",22,[[],["self"]]],[11,"eq","","",22,[[["self"],["self"]],["bool"]]],[11,"ne","","",22,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",22,[[["self"],["m128x1"]],["m128x1"]]],[11,"select","","Selects elements of `a` and `b` using mask.",22,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",22,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["self"]],["bool"]]],[11,"le","","",22,[[["self"],["self"]],["bool"]]],[11,"ge","","",22,[[["self"],["self"]],["bool"]]],[11,"gt","","",22,[[["self"],["self"]],["bool"]]],[11,"cmp","","",22,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",23,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",23,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",23,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",23,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",23,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",23,[[["self"],["self"]],["self"]]],[11,"sub","","",23,[[["self"],["self"]],["self"]]],[11,"mul","","",23,[[["self"],["self"]],["self"]]],[11,"div","","",23,[[["self"],["self"]],["self"]]],[11,"rem","","",23,[[["self"],["self"]],["self"]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"div_assign","","",23,[[["self"],["self"]]]],[11,"rem_assign","","",23,[[["self"],["self"]]]],[11,"add","","",23,[[["self"],["i8"]],["self"]]],[11,"sub","","",23,[[["self"],["i8"]],["self"]]],[11,"mul","","",23,[[["self"],["i8"]],["self"]]],[11,"div","","",23,[[["self"],["i8"]],["self"]]],[11,"rem","","",23,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",23,[[["self"],["i8"]]]],[11,"sub_assign","","",23,[[["self"],["i8"]]]],[11,"mul_assign","","",23,[[["self"],["i8"]]]],[11,"div_assign","","",23,[[["self"],["i8"]]]],[11,"rem_assign","","",23,[[["self"],["i8"]]]],[11,"not","","",23,[[["self"]],["self"]]],[11,"bitxor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand","","",23,[[["self"],["self"]],["self"]]],[11,"bitor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["self"]]]],[11,"bitor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor","","",23,[[["self"],["i8"]],["self"]]],[11,"bitand","","",23,[[["self"],["i8"]],["self"]]],[11,"bitor","","",23,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["i8"]]]],[11,"bitor_assign","","",23,[[["self"],["i8"]]]],[11,"bitxor_assign","","",23,[[["self"],["i8"]]]],[11,"shl","","",23,[[["self"],["self"]],["self"]]],[11,"shr","","",23,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["self"]]]],[11,"shr_assign","","",23,[[["self"],["self"]]]],[11,"shl","","",23,[[["self"],["u32"]],["self"]]],[11,"shr","","",23,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u32"]]]],[11,"shr_assign","","",23,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",23,[[["self"],["i8x32"]],["i8x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",23,[[["self"],["i8x32"]],["i8x32"]]],[11,"neg","","",23,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",23,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",23,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",23,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",23,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",23,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",23,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",23,[[["self"]],["i8"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from","","",23,N],[11,"default","","",23,[[],["self"]]],[11,"hash","","",23,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"swap_bytes","","Reverses the byte order of the vector.",23,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"eq","","",23,[[["self"],["self"]],["bool"]]],[11,"ne","","",23,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",23,[[["self"],["i8x32"]],["m8x32"]]],[11,"partial_cmp","","",23,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["self"]],["bool"]]],[11,"le","","",23,[[["self"],["self"]],["bool"]]],[11,"ge","","",23,[[["self"],["self"]],["bool"]]],[11,"gt","","",23,[[["self"],["self"]],["bool"]]],[11,"cmp","","",23,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",24,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",24,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",24,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",24,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",24,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",24,[[["self"],["self"]],["self"]]],[11,"sub","","",24,[[["self"],["self"]],["self"]]],[11,"mul","","",24,[[["self"],["self"]],["self"]]],[11,"div","","",24,[[["self"],["self"]],["self"]]],[11,"rem","","",24,[[["self"],["self"]],["self"]]],[11,"add_assign","","",24,[[["self"],["self"]]]],[11,"sub_assign","","",24,[[["self"],["self"]]]],[11,"mul_assign","","",24,[[["self"],["self"]]]],[11,"div_assign","","",24,[[["self"],["self"]]]],[11,"rem_assign","","",24,[[["self"],["self"]]]],[11,"add","","",24,[[["self"],["u8"]],["self"]]],[11,"sub","","",24,[[["self"],["u8"]],["self"]]],[11,"mul","","",24,[[["self"],["u8"]],["self"]]],[11,"div","","",24,[[["self"],["u8"]],["self"]]],[11,"rem","","",24,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",24,[[["self"],["u8"]]]],[11,"sub_assign","","",24,[[["self"],["u8"]]]],[11,"mul_assign","","",24,[[["self"],["u8"]]]],[11,"div_assign","","",24,[[["self"],["u8"]]]],[11,"rem_assign","","",24,[[["self"],["u8"]]]],[11,"not","","",24,[[["self"]],["self"]]],[11,"bitxor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand","","",24,[[["self"],["self"]],["self"]]],[11,"bitor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["self"]]]],[11,"bitor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor","","",24,[[["self"],["u8"]],["self"]]],[11,"bitand","","",24,[[["self"],["u8"]],["self"]]],[11,"bitor","","",24,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["u8"]]]],[11,"bitor_assign","","",24,[[["self"],["u8"]]]],[11,"bitxor_assign","","",24,[[["self"],["u8"]]]],[11,"shl","","",24,[[["self"],["self"]],["self"]]],[11,"shr","","",24,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["self"]]]],[11,"shr_assign","","",24,[[["self"],["self"]]]],[11,"shl","","",24,[[["self"],["u32"]],["self"]]],[11,"shr","","",24,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["u32"]]]],[11,"shr_assign","","",24,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",24,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",24,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",24,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",24,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",24,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",24,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",24,[[["self"]],["u8"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"from","","",24,N],[11,"default","","",24,[[],["self"]]],[11,"hash","","",24,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"swap_bytes","","Reverses the byte order of the vector.",24,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"eq","","",24,[[["self"],["self"]],["bool"]]],[11,"ne","","",24,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",24,[[["self"],["u8x32"]],["m8x32"]]],[11,"partial_cmp","","",24,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["self"]],["bool"]]],[11,"le","","",24,[[["self"],["self"]],["bool"]]],[11,"ge","","",24,[[["self"],["self"]],["bool"]]],[11,"gt","","",24,[[["self"],["self"]],["bool"]]],[11,"cmp","","",24,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",25,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",25,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",25,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",25,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",25,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",25,[[["self"]],["self"]]],[11,"bitxor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand","","",25,[[["self"],["self"]],["self"]]],[11,"bitor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["self"]]]],[11,"bitor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor","","",25,[[["self"],["bool"]],["self"]]],[11,"bitand","","",25,[[["self"],["bool"]],["self"]]],[11,"bitor","","",25,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["bool"]]]],[11,"bitor_assign","","",25,[[["self"],["bool"]]]],[11,"bitxor_assign","","",25,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",25,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",25,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",25,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",25,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",25,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",25,[[["self"]],["bool"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"from","","",25,N],[11,"default","","",25,[[],["self"]]],[11,"eq","","",25,[[["self"],["self"]],["bool"]]],[11,"ne","","",25,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",25,[[["self"],["m8x32"]],["m8x32"]]],[11,"select","","Selects elements of `a` and `b` using mask.",25,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",25,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["self"]],["bool"]]],[11,"le","","",25,[[["self"],["self"]],["bool"]]],[11,"ge","","",25,[[["self"],["self"]],["bool"]]],[11,"gt","","",25,[[["self"],["self"]],["bool"]]],[11,"cmp","","",25,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",26,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",26,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",26,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",26,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",26,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",26,[[["self"],["self"]],["self"]]],[11,"sub","","",26,[[["self"],["self"]],["self"]]],[11,"mul","","",26,[[["self"],["self"]],["self"]]],[11,"div","","",26,[[["self"],["self"]],["self"]]],[11,"rem","","",26,[[["self"],["self"]],["self"]]],[11,"add_assign","","",26,[[["self"],["self"]]]],[11,"sub_assign","","",26,[[["self"],["self"]]]],[11,"mul_assign","","",26,[[["self"],["self"]]]],[11,"div_assign","","",26,[[["self"],["self"]]]],[11,"rem_assign","","",26,[[["self"],["self"]]]],[11,"add","","",26,[[["self"],["i16"]],["self"]]],[11,"sub","","",26,[[["self"],["i16"]],["self"]]],[11,"mul","","",26,[[["self"],["i16"]],["self"]]],[11,"div","","",26,[[["self"],["i16"]],["self"]]],[11,"rem","","",26,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",26,[[["self"],["i16"]]]],[11,"sub_assign","","",26,[[["self"],["i16"]]]],[11,"mul_assign","","",26,[[["self"],["i16"]]]],[11,"div_assign","","",26,[[["self"],["i16"]]]],[11,"rem_assign","","",26,[[["self"],["i16"]]]],[11,"not","","",26,[[["self"]],["self"]]],[11,"bitxor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand","","",26,[[["self"],["self"]],["self"]]],[11,"bitor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["self"]]]],[11,"bitor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor","","",26,[[["self"],["i16"]],["self"]]],[11,"bitand","","",26,[[["self"],["i16"]],["self"]]],[11,"bitor","","",26,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["i16"]]]],[11,"bitor_assign","","",26,[[["self"],["i16"]]]],[11,"bitxor_assign","","",26,[[["self"],["i16"]]]],[11,"shl","","",26,[[["self"],["self"]],["self"]]],[11,"shr","","",26,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["self"]]]],[11,"shr_assign","","",26,[[["self"],["self"]]]],[11,"shl","","",26,[[["self"],["u32"]],["self"]]],[11,"shr","","",26,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["u32"]]]],[11,"shr_assign","","",26,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",26,[[["self"],["i16x16"]],["i16x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",26,[[["self"],["i16x16"]],["i16x16"]]],[11,"neg","","",26,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",26,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",26,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",26,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",26,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",26,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",26,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",26,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",26,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",26,[[["self"]],["i16"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"from","","",26,N],[11,"from","","",26,[[["i8x16"]],["self"]]],[11,"from","","",26,[[["u8x16"]],["self"]]],[11,"default","","",26,[[],["self"]]],[11,"hash","","",26,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",26,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",26,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",26,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",26,N],[11,"swap_bytes","","Reverses the byte order of the vector.",26,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",26,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",26,[[["self"]],["self"]]],[11,"eq","","",26,[[["self"],["self"]],["bool"]]],[11,"ne","","",26,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",26,[[["self"],["i16x16"]],["m16x16"]]],[11,"partial_cmp","","",26,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["self"]],["bool"]]],[11,"le","","",26,[[["self"],["self"]],["bool"]]],[11,"ge","","",26,[[["self"],["self"]],["bool"]]],[11,"gt","","",26,[[["self"],["self"]],["bool"]]],[11,"cmp","","",26,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",27,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",27,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",27,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",27,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",27,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",27,[[["self"],["self"]],["self"]]],[11,"sub","","",27,[[["self"],["self"]],["self"]]],[11,"mul","","",27,[[["self"],["self"]],["self"]]],[11,"div","","",27,[[["self"],["self"]],["self"]]],[11,"rem","","",27,[[["self"],["self"]],["self"]]],[11,"add_assign","","",27,[[["self"],["self"]]]],[11,"sub_assign","","",27,[[["self"],["self"]]]],[11,"mul_assign","","",27,[[["self"],["self"]]]],[11,"div_assign","","",27,[[["self"],["self"]]]],[11,"rem_assign","","",27,[[["self"],["self"]]]],[11,"add","","",27,[[["self"],["u16"]],["self"]]],[11,"sub","","",27,[[["self"],["u16"]],["self"]]],[11,"mul","","",27,[[["self"],["u16"]],["self"]]],[11,"div","","",27,[[["self"],["u16"]],["self"]]],[11,"rem","","",27,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",27,[[["self"],["u16"]]]],[11,"sub_assign","","",27,[[["self"],["u16"]]]],[11,"mul_assign","","",27,[[["self"],["u16"]]]],[11,"div_assign","","",27,[[["self"],["u16"]]]],[11,"rem_assign","","",27,[[["self"],["u16"]]]],[11,"not","","",27,[[["self"]],["self"]]],[11,"bitxor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand","","",27,[[["self"],["self"]],["self"]]],[11,"bitor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["self"]]]],[11,"bitor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor","","",27,[[["self"],["u16"]],["self"]]],[11,"bitand","","",27,[[["self"],["u16"]],["self"]]],[11,"bitor","","",27,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["u16"]]]],[11,"bitor_assign","","",27,[[["self"],["u16"]]]],[11,"bitxor_assign","","",27,[[["self"],["u16"]]]],[11,"shl","","",27,[[["self"],["self"]],["self"]]],[11,"shr","","",27,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["self"]]]],[11,"shr_assign","","",27,[[["self"],["self"]]]],[11,"shl","","",27,[[["self"],["u32"]],["self"]]],[11,"shr","","",27,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["u32"]]]],[11,"shr_assign","","",27,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",27,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",27,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",27,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",27,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",27,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",27,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",27,[[["self"]],["u16"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"from","","",27,N],[11,"from","","",27,[[["u8x16"]],["self"]]],[11,"default","","",27,[[],["self"]]],[11,"hash","","",27,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"swap_bytes","","Reverses the byte order of the vector.",27,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"eq","","",27,[[["self"],["self"]],["bool"]]],[11,"ne","","",27,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",27,[[["self"],["u16x16"]],["m16x16"]]],[11,"partial_cmp","","",27,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["self"]],["bool"]]],[11,"le","","",27,[[["self"],["self"]],["bool"]]],[11,"ge","","",27,[[["self"],["self"]],["bool"]]],[11,"gt","","",27,[[["self"],["self"]],["bool"]]],[11,"cmp","","",27,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",28,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",28,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",28,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",28,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",28,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",28,[[["self"]],["self"]]],[11,"bitxor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand","","",28,[[["self"],["self"]],["self"]]],[11,"bitor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["self"]]]],[11,"bitor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor","","",28,[[["self"],["bool"]],["self"]]],[11,"bitand","","",28,[[["self"],["bool"]],["self"]]],[11,"bitor","","",28,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["bool"]]]],[11,"bitor_assign","","",28,[[["self"],["bool"]]]],[11,"bitxor_assign","","",28,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",28,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",28,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",28,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",28,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",28,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",28,[[["self"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"from","","",28,N],[11,"from","","",28,[[["m8x16"]],["self"]]],[11,"default","","",28,[[],["self"]]],[11,"eq","","",28,[[["self"],["self"]],["bool"]]],[11,"ne","","",28,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",28,[[["self"],["m16x16"]],["m16x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",28,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",28,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["self"]],["bool"]]],[11,"le","","",28,[[["self"],["self"]],["bool"]]],[11,"ge","","",28,[[["self"],["self"]],["bool"]]],[11,"gt","","",28,[[["self"],["self"]],["bool"]]],[11,"cmp","","",28,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",29,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",29,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",29,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",29,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",29,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",29,[[["self"],["self"]],["self"]]],[11,"sub","","",29,[[["self"],["self"]],["self"]]],[11,"mul","","",29,[[["self"],["self"]],["self"]]],[11,"div","","",29,[[["self"],["self"]],["self"]]],[11,"rem","","",29,[[["self"],["self"]],["self"]]],[11,"add_assign","","",29,[[["self"],["self"]]]],[11,"sub_assign","","",29,[[["self"],["self"]]]],[11,"mul_assign","","",29,[[["self"],["self"]]]],[11,"div_assign","","",29,[[["self"],["self"]]]],[11,"rem_assign","","",29,[[["self"],["self"]]]],[11,"add","","",29,[[["self"],["i32"]],["self"]]],[11,"sub","","",29,[[["self"],["i32"]],["self"]]],[11,"mul","","",29,[[["self"],["i32"]],["self"]]],[11,"div","","",29,[[["self"],["i32"]],["self"]]],[11,"rem","","",29,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",29,[[["self"],["i32"]]]],[11,"sub_assign","","",29,[[["self"],["i32"]]]],[11,"mul_assign","","",29,[[["self"],["i32"]]]],[11,"div_assign","","",29,[[["self"],["i32"]]]],[11,"rem_assign","","",29,[[["self"],["i32"]]]],[11,"not","","",29,[[["self"]],["self"]]],[11,"bitxor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand","","",29,[[["self"],["self"]],["self"]]],[11,"bitor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["self"]]]],[11,"bitor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor","","",29,[[["self"],["i32"]],["self"]]],[11,"bitand","","",29,[[["self"],["i32"]],["self"]]],[11,"bitor","","",29,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["i32"]]]],[11,"bitor_assign","","",29,[[["self"],["i32"]]]],[11,"bitxor_assign","","",29,[[["self"],["i32"]]]],[11,"shl","","",29,[[["self"],["self"]],["self"]]],[11,"shr","","",29,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["self"]]]],[11,"shr_assign","","",29,[[["self"],["self"]]]],[11,"shl","","",29,[[["self"],["u32"]],["self"]]],[11,"shr","","",29,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["u32"]]]],[11,"shr_assign","","",29,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",29,[[["self"],["i32x8"]],["i32x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",29,[[["self"],["i32x8"]],["i32x8"]]],[11,"neg","","",29,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",29,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",29,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",29,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",29,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",29,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",29,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",29,[[["self"]],["i32"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"from","","",29,N],[11,"from","","",29,[[["i16x8"]],["self"]]],[11,"from","","",29,[[["u16x8"]],["self"]]],[11,"default","","",29,[[],["self"]]],[11,"hash","","",29,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"swap_bytes","","Reverses the byte order of the vector.",29,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",29,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",29,[[["self"]],["self"]]],[11,"eq","","",29,[[["self"],["self"]],["bool"]]],[11,"ne","","",29,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",29,[[["self"],["i32x8"]],["m32x8"]]],[11,"partial_cmp","","",29,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["self"]],["bool"]]],[11,"le","","",29,[[["self"],["self"]],["bool"]]],[11,"ge","","",29,[[["self"],["self"]],["bool"]]],[11,"gt","","",29,[[["self"],["self"]],["bool"]]],[11,"cmp","","",29,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",30,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",30,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",30,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",30,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",30,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",30,[[["self"],["self"]],["self"]]],[11,"sub","","",30,[[["self"],["self"]],["self"]]],[11,"mul","","",30,[[["self"],["self"]],["self"]]],[11,"div","","",30,[[["self"],["self"]],["self"]]],[11,"rem","","",30,[[["self"],["self"]],["self"]]],[11,"add_assign","","",30,[[["self"],["self"]]]],[11,"sub_assign","","",30,[[["self"],["self"]]]],[11,"mul_assign","","",30,[[["self"],["self"]]]],[11,"div_assign","","",30,[[["self"],["self"]]]],[11,"rem_assign","","",30,[[["self"],["self"]]]],[11,"add","","",30,[[["self"],["u32"]],["self"]]],[11,"sub","","",30,[[["self"],["u32"]],["self"]]],[11,"mul","","",30,[[["self"],["u32"]],["self"]]],[11,"div","","",30,[[["self"],["u32"]],["self"]]],[11,"rem","","",30,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",30,[[["self"],["u32"]]]],[11,"sub_assign","","",30,[[["self"],["u32"]]]],[11,"mul_assign","","",30,[[["self"],["u32"]]]],[11,"div_assign","","",30,[[["self"],["u32"]]]],[11,"rem_assign","","",30,[[["self"],["u32"]]]],[11,"not","","",30,[[["self"]],["self"]]],[11,"bitxor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand","","",30,[[["self"],["self"]],["self"]]],[11,"bitor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["self"]]]],[11,"bitor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor","","",30,[[["self"],["u32"]],["self"]]],[11,"bitand","","",30,[[["self"],["u32"]],["self"]]],[11,"bitor","","",30,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["u32"]]]],[11,"bitor_assign","","",30,[[["self"],["u32"]]]],[11,"bitxor_assign","","",30,[[["self"],["u32"]]]],[11,"shl","","",30,[[["self"],["self"]],["self"]]],[11,"shr","","",30,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["self"]]]],[11,"shr_assign","","",30,[[["self"],["self"]]]],[11,"shl","","",30,[[["self"],["u32"]],["self"]]],[11,"shr","","",30,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u32"]]]],[11,"shr_assign","","",30,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",30,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",30,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",30,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",30,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",30,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",30,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",30,[[["self"]],["u32"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"from","","",30,N],[11,"from","","",30,[[["u16x8"]],["self"]]],[11,"default","","",30,[[],["self"]]],[11,"hash","","",30,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"swap_bytes","","Reverses the byte order of the vector.",30,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"eq","","",30,[[["self"],["self"]],["bool"]]],[11,"ne","","",30,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",30,[[["self"],["u32x8"]],["m32x8"]]],[11,"partial_cmp","","",30,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["self"]],["bool"]]],[11,"le","","",30,[[["self"],["self"]],["bool"]]],[11,"ge","","",30,[[["self"],["self"]],["bool"]]],[11,"gt","","",30,[[["self"],["self"]],["bool"]]],[11,"cmp","","",30,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",31,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",31,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",31,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",31,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",31,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",31,[[["self"],["self"]],["self"]]],[11,"sub","","",31,[[["self"],["self"]],["self"]]],[11,"mul","","",31,[[["self"],["self"]],["self"]]],[11,"div","","",31,[[["self"],["self"]],["self"]]],[11,"rem","","",31,[[["self"],["self"]],["self"]]],[11,"add_assign","","",31,[[["self"],["self"]]]],[11,"sub_assign","","",31,[[["self"],["self"]]]],[11,"mul_assign","","",31,[[["self"],["self"]]]],[11,"div_assign","","",31,[[["self"],["self"]]]],[11,"rem_assign","","",31,[[["self"],["self"]]]],[11,"add","","",31,[[["self"],["f32"]],["self"]]],[11,"sub","","",31,[[["self"],["f32"]],["self"]]],[11,"mul","","",31,[[["self"],["f32"]],["self"]]],[11,"div","","",31,[[["self"],["f32"]],["self"]]],[11,"rem","","",31,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",31,[[["self"],["f32"]]]],[11,"sub_assign","","",31,[[["self"],["f32"]]]],[11,"mul_assign","","",31,[[["self"],["f32"]]]],[11,"div_assign","","",31,[[["self"],["f32"]]]],[11,"rem_assign","","",31,[[["self"],["f32"]]]],[11,"neg","","",31,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",31,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",31,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",31,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",31,[[["self"]],["f32"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"from","","",31,N],[11,"from","","",31,[[["i16x8"]],["self"]]],[11,"from","","",31,[[["u16x8"]],["self"]]],[11,"default","","",31,[[],["self"]]],[11,"eq","","",31,[[["self"],["self"]],["bool"]]],[11,"ne","","",31,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"abs","","Absolute value.",31,[[["self"]],["self"]]],[11,"cos","","Cosine.",31,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",31,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",31,[[["self"]],["self"]]],[11,"sin","","",31,[[["self"]],["self"]]],[11,"sqrt","","",31,[[["self"]],["self"]]],[11,"sqrte","","",31,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",31,[[["self"],["f32x8"]],["m32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",32,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",32,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",32,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",32,[[["self"]],["self"]]],[11,"bitxor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand","","",32,[[["self"],["self"]],["self"]]],[11,"bitor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["self"]]]],[11,"bitor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand","","",32,[[["self"],["bool"]],["self"]]],[11,"bitor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["bool"]]]],[11,"bitor_assign","","",32,[[["self"],["bool"]]]],[11,"bitxor_assign","","",32,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",32,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",32,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",32,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",32,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",32,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",32,[[["self"]],["bool"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"from","","",32,N],[11,"from","","",32,[[["m16x8"]],["self"]]],[11,"default","","",32,[[],["self"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"ne","","",32,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",32,[[["self"],["m32x8"]],["m32x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",32,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",32,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["self"]],["bool"]]],[11,"le","","",32,[[["self"],["self"]],["bool"]]],[11,"ge","","",32,[[["self"],["self"]],["bool"]]],[11,"gt","","",32,[[["self"],["self"]],["bool"]]],[11,"cmp","","",32,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",33,[[["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",33,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",33,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",33,[[["self"],["self"]],["self"]]],[11,"sub","","",33,[[["self"],["self"]],["self"]]],[11,"mul","","",33,[[["self"],["self"]],["self"]]],[11,"div","","",33,[[["self"],["self"]],["self"]]],[11,"rem","","",33,[[["self"],["self"]],["self"]]],[11,"add_assign","","",33,[[["self"],["self"]]]],[11,"sub_assign","","",33,[[["self"],["self"]]]],[11,"mul_assign","","",33,[[["self"],["self"]]]],[11,"div_assign","","",33,[[["self"],["self"]]]],[11,"rem_assign","","",33,[[["self"],["self"]]]],[11,"add","","",33,[[["self"],["i64"]],["self"]]],[11,"sub","","",33,[[["self"],["i64"]],["self"]]],[11,"mul","","",33,[[["self"],["i64"]],["self"]]],[11,"div","","",33,[[["self"],["i64"]],["self"]]],[11,"rem","","",33,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",33,[[["self"],["i64"]]]],[11,"sub_assign","","",33,[[["self"],["i64"]]]],[11,"mul_assign","","",33,[[["self"],["i64"]]]],[11,"div_assign","","",33,[[["self"],["i64"]]]],[11,"rem_assign","","",33,[[["self"],["i64"]]]],[11,"not","","",33,[[["self"]],["self"]]],[11,"bitxor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand","","",33,[[["self"],["self"]],["self"]]],[11,"bitor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["self"]]]],[11,"bitor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor","","",33,[[["self"],["i64"]],["self"]]],[11,"bitand","","",33,[[["self"],["i64"]],["self"]]],[11,"bitor","","",33,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["i64"]]]],[11,"bitor_assign","","",33,[[["self"],["i64"]]]],[11,"bitxor_assign","","",33,[[["self"],["i64"]]]],[11,"shl","","",33,[[["self"],["self"]],["self"]]],[11,"shr","","",33,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["self"]]]],[11,"shr_assign","","",33,[[["self"],["self"]]]],[11,"shl","","",33,[[["self"],["u32"]],["self"]]],[11,"shr","","",33,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u32"]]]],[11,"shr_assign","","",33,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",33,[[["self"],["i64x4"]],["i64x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",33,[[["self"],["i64x4"]],["i64x4"]]],[11,"neg","","",33,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",33,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",33,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",33,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",33,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",33,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",33,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",33,[[["self"]],["i64"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"from","","",33,N],[11,"from","","",33,[[["i32x4"]],["self"]]],[11,"from","","",33,[[["u32x4"]],["self"]]],[11,"default","","",33,[[],["self"]]],[11,"hash","","",33,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"swap_bytes","","Reverses the byte order of the vector.",33,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"ne","","",33,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",33,[[["self"],["i64x4"]],["m64x4"]]],[11,"partial_cmp","","",33,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["self"]],["bool"]]],[11,"le","","",33,[[["self"],["self"]],["bool"]]],[11,"ge","","",33,[[["self"],["self"]],["bool"]]],[11,"gt","","",33,[[["self"],["self"]],["bool"]]],[11,"cmp","","",33,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",34,[[["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",34,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",34,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",34,[[["self"],["self"]],["self"]]],[11,"sub","","",34,[[["self"],["self"]],["self"]]],[11,"mul","","",34,[[["self"],["self"]],["self"]]],[11,"div","","",34,[[["self"],["self"]],["self"]]],[11,"rem","","",34,[[["self"],["self"]],["self"]]],[11,"add_assign","","",34,[[["self"],["self"]]]],[11,"sub_assign","","",34,[[["self"],["self"]]]],[11,"mul_assign","","",34,[[["self"],["self"]]]],[11,"div_assign","","",34,[[["self"],["self"]]]],[11,"rem_assign","","",34,[[["self"],["self"]]]],[11,"add","","",34,[[["self"],["u64"]],["self"]]],[11,"sub","","",34,[[["self"],["u64"]],["self"]]],[11,"mul","","",34,[[["self"],["u64"]],["self"]]],[11,"div","","",34,[[["self"],["u64"]],["self"]]],[11,"rem","","",34,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",34,[[["self"],["u64"]]]],[11,"sub_assign","","",34,[[["self"],["u64"]]]],[11,"mul_assign","","",34,[[["self"],["u64"]]]],[11,"div_assign","","",34,[[["self"],["u64"]]]],[11,"rem_assign","","",34,[[["self"],["u64"]]]],[11,"not","","",34,[[["self"]],["self"]]],[11,"bitxor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand","","",34,[[["self"],["self"]],["self"]]],[11,"bitor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["self"]]]],[11,"bitor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor","","",34,[[["self"],["u64"]],["self"]]],[11,"bitand","","",34,[[["self"],["u64"]],["self"]]],[11,"bitor","","",34,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["u64"]]]],[11,"bitor_assign","","",34,[[["self"],["u64"]]]],[11,"bitxor_assign","","",34,[[["self"],["u64"]]]],[11,"shl","","",34,[[["self"],["self"]],["self"]]],[11,"shr","","",34,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["self"]]]],[11,"shr_assign","","",34,[[["self"],["self"]]]],[11,"shl","","",34,[[["self"],["u32"]],["self"]]],[11,"shr","","",34,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u32"]]]],[11,"shr_assign","","",34,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",34,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",34,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",34,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",34,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",34,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",34,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",34,[[["self"]],["u64"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"from","","",34,N],[11,"from","","",34,[[["u32x4"]],["self"]]],[11,"default","","",34,[[],["self"]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"swap_bytes","","Reverses the byte order of the vector.",34,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"ne","","",34,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",34,[[["self"],["u64x4"]],["m64x4"]]],[11,"partial_cmp","","",34,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["self"]],["bool"]]],[11,"le","","",34,[[["self"],["self"]],["bool"]]],[11,"ge","","",34,[[["self"],["self"]],["bool"]]],[11,"gt","","",34,[[["self"],["self"]],["bool"]]],[11,"cmp","","",34,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",35,[[["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",35,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",35,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",35,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",35,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",35,[[["self"],["self"]],["self"]]],[11,"sub","","",35,[[["self"],["self"]],["self"]]],[11,"mul","","",35,[[["self"],["self"]],["self"]]],[11,"div","","",35,[[["self"],["self"]],["self"]]],[11,"rem","","",35,[[["self"],["self"]],["self"]]],[11,"add_assign","","",35,[[["self"],["self"]]]],[11,"sub_assign","","",35,[[["self"],["self"]]]],[11,"mul_assign","","",35,[[["self"],["self"]]]],[11,"div_assign","","",35,[[["self"],["self"]]]],[11,"rem_assign","","",35,[[["self"],["self"]]]],[11,"add","","",35,[[["self"],["f64"]],["self"]]],[11,"sub","","",35,[[["self"],["f64"]],["self"]]],[11,"mul","","",35,[[["self"],["f64"]],["self"]]],[11,"div","","",35,[[["self"],["f64"]],["self"]]],[11,"rem","","",35,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",35,[[["self"],["f64"]]]],[11,"sub_assign","","",35,[[["self"],["f64"]]]],[11,"mul_assign","","",35,[[["self"],["f64"]]]],[11,"div_assign","","",35,[[["self"],["f64"]]]],[11,"rem_assign","","",35,[[["self"],["f64"]]]],[11,"neg","","",35,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",35,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",35,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",35,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",35,[[["self"]],["f64"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"from","","",35,N],[11,"from","","",35,[[["i32x4"]],["self"]]],[11,"from","","",35,[[["u32x4"]],["self"]]],[11,"from","","",35,[[["f32x4"]],["self"]]],[11,"default","","",35,[[],["self"]]],[11,"eq","","",35,[[["self"],["self"]],["bool"]]],[11,"ne","","",35,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"abs","","Absolute value.",35,[[["self"]],["self"]]],[11,"cos","","Cosine.",35,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",35,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",35,[[["self"]],["self"]]],[11,"sin","","",35,[[["self"]],["self"]]],[11,"sqrt","","",35,[[["self"]],["self"]]],[11,"sqrte","","",35,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",35,[[["self"],["f64x4"]],["m64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",36,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",36,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",36,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",36,[[["self"]],["self"]]],[11,"bitxor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand","","",36,[[["self"],["self"]],["self"]]],[11,"bitor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["self"]]]],[11,"bitor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand","","",36,[[["self"],["bool"]],["self"]]],[11,"bitor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["bool"]]]],[11,"bitor_assign","","",36,[[["self"],["bool"]]]],[11,"bitxor_assign","","",36,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",36,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",36,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",36,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",36,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",36,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",36,[[["self"]],["bool"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"from","","",36,N],[11,"from","","",36,[[["m32x4"]],["self"]]],[11,"default","","",36,[[],["self"]]],[11,"eq","","",36,[[["self"],["self"]],["bool"]]],[11,"ne","","",36,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",36,[[["self"],["m64x4"]],["m64x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",36,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",36,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["self"]],["bool"]]],[11,"le","","",36,[[["self"],["self"]],["bool"]]],[11,"ge","","",36,[[["self"],["self"]],["bool"]]],[11,"gt","","",36,[[["self"],["self"]],["bool"]]],[11,"cmp","","",36,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",37,[[["i128"],["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",37,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",37,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",37,[[["self"],["self"]],["self"]]],[11,"sub","","",37,[[["self"],["self"]],["self"]]],[11,"mul","","",37,[[["self"],["self"]],["self"]]],[11,"div","","",37,[[["self"],["self"]],["self"]]],[11,"rem","","",37,[[["self"],["self"]],["self"]]],[11,"add_assign","","",37,[[["self"],["self"]]]],[11,"sub_assign","","",37,[[["self"],["self"]]]],[11,"mul_assign","","",37,[[["self"],["self"]]]],[11,"div_assign","","",37,[[["self"],["self"]]]],[11,"rem_assign","","",37,[[["self"],["self"]]]],[11,"add","","",37,[[["self"],["i128"]],["self"]]],[11,"sub","","",37,[[["self"],["i128"]],["self"]]],[11,"mul","","",37,[[["self"],["i128"]],["self"]]],[11,"div","","",37,[[["self"],["i128"]],["self"]]],[11,"rem","","",37,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",37,[[["self"],["i128"]]]],[11,"sub_assign","","",37,[[["self"],["i128"]]]],[11,"mul_assign","","",37,[[["self"],["i128"]]]],[11,"div_assign","","",37,[[["self"],["i128"]]]],[11,"rem_assign","","",37,[[["self"],["i128"]]]],[11,"not","","",37,[[["self"]],["self"]]],[11,"bitxor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand","","",37,[[["self"],["self"]],["self"]]],[11,"bitor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["self"]]]],[11,"bitor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor","","",37,[[["self"],["i128"]],["self"]]],[11,"bitand","","",37,[[["self"],["i128"]],["self"]]],[11,"bitor","","",37,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["i128"]]]],[11,"bitor_assign","","",37,[[["self"],["i128"]]]],[11,"bitxor_assign","","",37,[[["self"],["i128"]]]],[11,"shl","","",37,[[["self"],["self"]],["self"]]],[11,"shr","","",37,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["self"]]]],[11,"shr_assign","","",37,[[["self"],["self"]]]],[11,"shl","","",37,[[["self"],["u32"]],["self"]]],[11,"shr","","",37,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u32"]]]],[11,"shr_assign","","",37,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",37,[[["self"],["i128x2"]],["i128x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",37,[[["self"],["i128x2"]],["i128x2"]]],[11,"neg","","",37,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",37,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",37,[[["self"]],["i128"]]],[11,"max_element","","Largest vector element value.",37,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",37,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",37,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",37,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",37,[[["self"]],["i128"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"from","","",37,N],[11,"from","","",37,[[["i64x2"]],["self"]]],[11,"from","","",37,[[["u64x2"]],["self"]]],[11,"default","","",37,[[],["self"]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"swap_bytes","","Reverses the byte order of the vector.",37,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"eq","","",37,[[["self"],["self"]],["bool"]]],[11,"ne","","",37,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",37,[[["self"],["i128x2"]],["m128x2"]]],[11,"partial_cmp","","",37,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["self"]],["bool"]]],[11,"le","","",37,[[["self"],["self"]],["bool"]]],[11,"ge","","",37,[[["self"],["self"]],["bool"]]],[11,"gt","","",37,[[["self"],["self"]],["bool"]]],[11,"cmp","","",37,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",38,[[["u128"],["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",38,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",38,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",38,[[["self"],["self"]],["self"]]],[11,"sub","","",38,[[["self"],["self"]],["self"]]],[11,"mul","","",38,[[["self"],["self"]],["self"]]],[11,"div","","",38,[[["self"],["self"]],["self"]]],[11,"rem","","",38,[[["self"],["self"]],["self"]]],[11,"add_assign","","",38,[[["self"],["self"]]]],[11,"sub_assign","","",38,[[["self"],["self"]]]],[11,"mul_assign","","",38,[[["self"],["self"]]]],[11,"div_assign","","",38,[[["self"],["self"]]]],[11,"rem_assign","","",38,[[["self"],["self"]]]],[11,"add","","",38,[[["self"],["u128"]],["self"]]],[11,"sub","","",38,[[["self"],["u128"]],["self"]]],[11,"mul","","",38,[[["self"],["u128"]],["self"]]],[11,"div","","",38,[[["self"],["u128"]],["self"]]],[11,"rem","","",38,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",38,[[["self"],["u128"]]]],[11,"sub_assign","","",38,[[["self"],["u128"]]]],[11,"mul_assign","","",38,[[["self"],["u128"]]]],[11,"div_assign","","",38,[[["self"],["u128"]]]],[11,"rem_assign","","",38,[[["self"],["u128"]]]],[11,"not","","",38,[[["self"]],["self"]]],[11,"bitxor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand","","",38,[[["self"],["self"]],["self"]]],[11,"bitor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["self"]]]],[11,"bitor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor","","",38,[[["self"],["u128"]],["self"]]],[11,"bitand","","",38,[[["self"],["u128"]],["self"]]],[11,"bitor","","",38,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["u128"]]]],[11,"bitor_assign","","",38,[[["self"],["u128"]]]],[11,"bitxor_assign","","",38,[[["self"],["u128"]]]],[11,"shl","","",38,[[["self"],["self"]],["self"]]],[11,"shr","","",38,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["self"]]]],[11,"shr_assign","","",38,[[["self"],["self"]]]],[11,"shl","","",38,[[["self"],["u32"]],["self"]]],[11,"shr","","",38,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["u32"]]]],[11,"shr_assign","","",38,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",38,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",38,[[["self"]],["u128"]]],[11,"max_element","","Largest vector element value.",38,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",38,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",38,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",38,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",38,[[["self"]],["u128"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"from","","",38,N],[11,"from","","",38,[[["u64x2"]],["self"]]],[11,"default","","",38,[[],["self"]]],[11,"hash","","",38,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"swap_bytes","","Reverses the byte order of the vector.",38,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"ne","","",38,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",38,[[["self"],["u128x2"]],["m128x2"]]],[11,"partial_cmp","","",38,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["self"]],["bool"]]],[11,"le","","",38,[[["self"],["self"]],["bool"]]],[11,"ge","","",38,[[["self"],["self"]],["bool"]]],[11,"gt","","",38,[[["self"],["self"]],["bool"]]],[11,"cmp","","",38,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",39,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",39,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",39,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",39,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",39,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",39,[[["self"]],["self"]]],[11,"bitxor","","",39,[[["self"],["self"]],["self"]]],[11,"bitand","","",39,[[["self"],["self"]],["self"]]],[11,"bitor","","",39,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",39,[[["self"],["self"]]]],[11,"bitor_assign","","",39,[[["self"],["self"]]]],[11,"bitxor_assign","","",39,[[["self"],["self"]]]],[11,"bitxor","","",39,[[["self"],["bool"]],["self"]]],[11,"bitand","","",39,[[["self"],["bool"]],["self"]]],[11,"bitor","","",39,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",39,[[["self"],["bool"]]]],[11,"bitor_assign","","",39,[[["self"],["bool"]]]],[11,"bitxor_assign","","",39,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",39,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",39,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",39,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",39,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",39,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",39,[[["self"]],["bool"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"from","","",39,N],[11,"from","","",39,[[["m64x2"]],["self"]]],[11,"default","","",39,[[],["self"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"ne","","",39,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",39,[[["self"],["m128x2"]],["m128x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",39,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",39,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["self"]],["bool"]]],[11,"le","","",39,[[["self"],["self"]],["bool"]]],[11,"ge","","",39,[[["self"],["self"]],["bool"]]],[11,"gt","","",39,[[["self"],["self"]],["bool"]]],[11,"cmp","","",39,[[["self"],["self"]],["ordering"]]]],"paths":[[3,"m8"],[3,"m16"],[3,"m32"],[3,"m64"],[3,"m128"],[3,"Simd"],[6,"i8x16"],[6,"u8x16"],[6,"m8x16"],[6,"i16x8"],[6,"u16x8"],[6,"m16x8"],[6,"i32x4"],[6,"u32x4"],[6,"f32x4"],[6,"m32x4"],[6,"i64x2"],[6,"u64x2"],[6,"f64x2"],[6,"m64x2"],[6,"i128x1"],[6,"u128x1"],[6,"m128x1"],[6,"i8x32"],[6,"u8x32"],[6,"m8x32"],[6,"i16x16"],[6,"u16x16"],[6,"m16x16"],[6,"i32x8"],[6,"u32x8"],[6,"f32x8"],[6,"m32x8"],[6,"i64x4"],[6,"u64x4"],[6,"f64x4"],[6,"m64x4"],[6,"i128x2"],[6,"u128x2"],[6,"m128x2"]]};
initSearch(searchIndex);
